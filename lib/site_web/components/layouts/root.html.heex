<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title default="Hello World" suffix=" Â· Nuno's Site">
      {assigns[:page_title]}
    </.live_title>
    <link rel="alternate" type="application/rss+xml" title="RSS feed for nuno.site" href="/rss" />
    <link phx-track-static rel="stylesheet" href={~p"/assets/css/app.css"} />
    <script defer phx-track-static type="module" src={~p"/assets/js/app.js"}>
    </script>
    <script type="text/javascript">
      // System theme
      (() => {
        const THEME_KEY = "phx:theme";
        const getSystemTheme = () => {
          return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
        };
        const setTheme = (theme) => {
          if (theme === "system") {
            localStorage.removeItem(THEME_KEY);
            document.documentElement.setAttribute("data-theme", getSystemTheme());
            document.documentElement.setAttribute("data-theme-mode", "system");
          } else {
            localStorage.setItem(THEME_KEY, theme);
            document.documentElement.setAttribute("data-theme", theme);
            document.documentElement.setAttribute("data-theme-mode", "user");
          }
        };
        const supportsViewTransitions = () => {
          return typeof document.startViewTransition === "function";
        }

        setTheme(localStorage.getItem(THEME_KEY) || "system");

        window.addEventListener("storage", (e) => { e.key === THEME_KEY && setTheme(e.newValue || "system"); });
        window.addEventListener("phx:set-theme", ({ detail: { theme } }) => {
          if (supportsViewTransitions()) {
            document.startViewTransition(() => {
              setTheme(theme);
            });
          } else {
            setTheme(theme);
          }
        });

      })();

      // OS Detection
      (() => {
        const userAgent = navigator.userAgent;

        let osName = "unknown";

        // Use modern userAgentData if available
        if (navigator.userAgentData) {
          const platform = navigator.userAgentData.platform.toLowerCase();

          if (platform.includes("mac")) {
            if (/iPhone|iPad/.test(userAgent)) {
              osName = "ios";
            } else {
              osName = "macos";
            }
          } else if (platform.includes("win")) {
            osName = "windows";
          } else if (platform.includes("linux")) {
            osName = "linux";
          } else if (platform.includes("android")) {
            osName = "android";
          }
        } else {
          // Fallback to userAgent parsing for older browsers
          if (/Mac|iPod|iPhone|iPad/.test(userAgent)) {
            if (/iPhone|iPad/.test(userAgent)) {
              osName = "ios";
            } else {
              osName = "macos";
            }
          } else if (/Win/.test(userAgent)) {
            osName = "windows";
          } else if (/Linux/.test(userAgent)) {
            osName = "linux";
          } else if (/Android/.test(userAgent)) {
            osName = "android";
          }
        }

        // Set the data-os attribute
        document.documentElement.setAttribute("data-os", osName);
      })();
    </script>

    <%!-- {Application.get_env(:live_debugger, :live_debugger_tags)} --%>
  </head>
  <body>
    {@inner_content}
  </body>
</html>
